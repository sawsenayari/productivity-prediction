import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression

st.set_page_config(page_title="Pr√©diction Productivit√©", page_icon="üßµ", layout="wide")
st.title("üöÄ Pr√©diction de la productivit√© des √©quipes")
st.markdown("Interface interactive pour pr√©dire la productivit√© et visualiser les r√©sultats.")

# Charger le mod√®le et les donn√©es
@st.cache_data
def load_and_train():
    try:
        df = pd.read_csv("data.csv")
    except FileNotFoundError:
        st.error("‚ö†Ô∏è Fichier data.csv introuvable.")
        return None, [], [], None, None
    
    df = df.dropna(subset=['actual_productivity']).reset_index(drop=True)
    X = df.drop(columns=['actual_productivity', 'date'])
    y = df['actual_productivity']

    numeric_features = X.select_dtypes(include=['int64','float64']).columns.tolist()
    categorical_features = X.select_dtypes(include=['object']).columns.tolist()

    numeric_transformer = Pipeline([
        ('imputer', SimpleImputer(strategy='median')),
        ('scaler', StandardScaler())
    ])
    categorical_transformer = Pipeline([
        ('imputer', SimpleImputer(strategy='most_frequent')),
        ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))
    ])
    
    preprocessor = ColumnTransformer([
        ('num', numeric_transformer, numeric_features),
        ('cat', categorical_transformer, categorical_features)
    ])
    
    model = Pipeline([
        ('pre', preprocessor),
        ('model', LinearRegression())
    ])
    
    model.fit(X, y)
    y_pred = model.predict(X)
    return model, numeric_features, categorical_features, y, y_pred

model, num_feats, cat_feats, y_true, y_pred = load_and_train()

# Sidebar pour toutes les features du CSV
st.sidebar.header("Entrez les caract√©ristiques de l'√©quipe")
inputs = {}
if model:
    # Features num√©riques
    for feat in num_feats:
        inputs[feat] = st.sidebar.number_input(f"{feat}", value=0.0)
    # Features cat√©gorielles
    for feat in cat_feats:
        unique_vals = ["unknown"] + sorted(pd.read_csv("data.csv")[feat].dropna().unique().tolist())
        inputs[feat] = st.sidebar.selectbox(f"{feat}", unique_vals)

    # Bouton de pr√©diction
    if st.sidebar.button("Pr√©dire"):
        X_new = pd.DataFrame([inputs])
        y_new_pred = model.predict(X_new)[0]
        st.sidebar.success(f"‚úÖ Productivit√© pr√©dite : {y_new_pred:.2f}")

        # Ajouter la nouvelle pr√©diction au graphique
        st.session_state.setdefault('new_preds', []).append((inputs, y_new_pred))

# Graphique R√©el vs Pr√©dit avec nouvelles pr√©dictions
if model:
    st.subheader("üìä R√©el vs Pr√©dit")
    fig, ax = plt.subplots()
    ax.scatter(y_true, y_pred, label="Historique")
    # Ajouter les nouvelles pr√©dictions
    if 'new_preds' in st.session_state:
        for _, y_pred_new in st.session_state['new_preds']:
            ax.scatter([y_pred_new], [y_pred_new], color='red', label="Nouvelle pr√©diction")
    ax.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'r--')
    ax.set_xlabel("Productivit√© r√©elle")
    ax.set_ylabel("Productivit√© pr√©dite")
    ax.legend()
    st.pyplot(fig)
