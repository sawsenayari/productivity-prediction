import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.pipeline import Pipeline
from sklearn.compose import ColumnTransformer
from sklearn.preprocessing import StandardScaler, OneHotEncoder
from sklearn.impute import SimpleImputer
from sklearn.linear_model import LinearRegression

# Param√®tres graphiques
sns.set(style="whitegrid")
plt.rcParams['figure.figsize'] = (8,5)

# Titre de l'app
st.title("üöÄ Pr√©diction de la productivit√© des √©quipes")
st.markdown("Application simple pour pr√©dire la productivit√© r√©elle d'une √©quipe d'usine.")

# Charger les donn√©es
@st.cache_data
def load_and_train():
    try:
        df = pd.read_csv("data.csv")
    except FileNotFoundError:
        st.error("‚ö†Ô∏è Fichier data.csv introuvable.")
        return None, [], [], None, None
    
    df = df.dropna(subset=['actual_productivity']).reset_index(drop=True)
    X = df.drop(columns=['actual_productivity', 'date'])
    y = df['actual_productivity']

    numeric_features = X.select_dtypes(include=['int64','float64']).columns.tolist()
    categorical_features = X.select_dtypes(include=['object']).columns.tolist()

    numeric_transformer = Pipeline([('imputer', SimpleImputer(strategy='median')),
                                    ('scaler', StandardScaler())])
    categorical_transformer = Pipeline([('imputer', SimpleImputer(strategy='most_frequent')),
                                        ('onehot', OneHotEncoder(handle_unknown='ignore', sparse_output=False))])
    
    preprocessor = ColumnTransformer([('num', numeric_transformer, numeric_features),
                                      ('cat', categorical_transformer, categorical_features)])
    
    model = Pipeline([('pre', preprocessor), ('model', LinearRegression())])
    model.fit(X, y)
    y_pred = model.predict(X)
    return model, numeric_features, categorical_features, y, y_pred

model, num_feats, cat_feats, y_true, y_pred = load_and_train()

# Sidebar pour les inputs utilisateur
st.sidebar.header("Entrer les caract√©ristiques de l'√©quipe")
inputs = {}
if model:
    for feat in num_feats:
        inputs[feat] = st.sidebar.number_input(f"{feat}", value=0.0)
    for feat in cat_feats:
        inputs[feat] = st.sidebar.text_input(f"{feat}", "unknown")
    
    if st.sidebar.button("Pr√©dire"):
        X_new = pd.DataFrame([inputs])
        y_new_pred = model.predict(X_new)[0]
        st.sidebar.success(f"‚úÖ Productivit√© pr√©dite : {y_new_pred:.2f}")

# Affichage graphique R√©el vs Pr√©dit
if model:
    st.subheader("üìä Courbe R√©el vs Pr√©dit")
    fig, ax = plt.subplots()
    sns.scatterplot(x=y_true, y=y_pred, ax=ax)
    ax.plot([y_true.min(), y_true.max()], [y_true.min(), y_true.max()], 'r--')
    ax.set_xlabel("Productivit√© r√©elle")
    ax.set_ylabel("Productivit√© pr√©dite")
    st.pyplot(fig)

    # Coefficients du mod√®le
    st.subheader("üìà Coefficients du mod√®le")
    try:
        coefs = model.named_steps['model'].coef_
        cat_features_encoded = model.named_steps['pre'].named_transformers_['cat'].named_steps['onehot'].get_feature_names_out(cat_feats)
        feature_names = num_feats + list(cat_features_encoded)
        coef_df = pd.DataFrame({"Feature": feature_names, "Coefficient": coefs})
        st.dataframe(coef_df)
    except:
        st.info("‚ö†Ô∏è Impossible d'afficher certains coefficients cat√©goriels.")
